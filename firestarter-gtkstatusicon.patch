diff -urN firestarter-1.0.3/src/eggtrayicon.c firestarter-1.0.3.new/src/eggtrayicon.c
--- firestarter-1.0.3/src/eggtrayicon.c	2005-01-29 20:32:08.000000000 +0800
+++ firestarter-1.0.3.new/src/eggtrayicon.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,468 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.c
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#include <config.h>
-#include <string.h>
-#include <libintl.h>
-
-#include "eggtrayicon.h"
-
-#include <gdk/gdkx.h>
-#include <X11/Xatom.h>
-
-#ifndef EGG_COMPILATION
-#ifndef _
-#define _(x) dgettext (GETTEXT_PACKAGE, x)
-#define N_(x) x
-#endif
-#else
-#define _(x) x
-#define N_(x) x
-#endif
-
-#define SYSTEM_TRAY_REQUEST_DOCK    0
-#define SYSTEM_TRAY_BEGIN_MESSAGE   1
-#define SYSTEM_TRAY_CANCEL_MESSAGE  2
-
-#define SYSTEM_TRAY_ORIENTATION_HORZ 0
-#define SYSTEM_TRAY_ORIENTATION_VERT 1
-
-enum {
-  PROP_0,
-  PROP_ORIENTATION
-};
-         
-static GtkPlugClass *parent_class = NULL;
-
-static void egg_tray_icon_init (EggTrayIcon *icon);
-static void egg_tray_icon_class_init (EggTrayIconClass *klass);
-
-static void egg_tray_icon_get_property (GObject    *object,
-					guint       prop_id,
-					GValue     *value,
-					GParamSpec *pspec);
-
-static void egg_tray_icon_realize   (GtkWidget *widget);
-static void egg_tray_icon_unrealize (GtkWidget *widget);
-
-static void egg_tray_icon_update_manager_window (EggTrayIcon *icon);
-
-GType
-egg_tray_icon_get_type (void)
-{
-  static GType our_type = 0;
-
-  if (our_type == 0)
-    {
-      static const GTypeInfo our_info =
-      {
-	sizeof (EggTrayIconClass),
-	(GBaseInitFunc) NULL,
-	(GBaseFinalizeFunc) NULL,
-	(GClassInitFunc) egg_tray_icon_class_init,
-	NULL, /* class_finalize */
-	NULL, /* class_data */
-	sizeof (EggTrayIcon),
-	0,    /* n_preallocs */
-	(GInstanceInitFunc) egg_tray_icon_init
-      };
-
-      our_type = g_type_register_static (GTK_TYPE_PLUG, "EggTrayIcon", &our_info, 0);
-    }
-
-  return our_type;
-}
-
-static void
-egg_tray_icon_init (EggTrayIcon *icon)
-{
-  icon->stamp = 1;
-  icon->orientation = GTK_ORIENTATION_HORIZONTAL;
-  
-  gtk_widget_add_events (GTK_WIDGET (icon), GDK_PROPERTY_CHANGE_MASK);
-}
-
-static void
-egg_tray_icon_class_init (EggTrayIconClass *klass)
-{
-  GObjectClass *gobject_class = (GObjectClass *)klass;
-  GtkWidgetClass *widget_class = (GtkWidgetClass *)klass;
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  gobject_class->get_property = egg_tray_icon_get_property;
-
-  widget_class->realize   = egg_tray_icon_realize;
-  widget_class->unrealize = egg_tray_icon_unrealize;
-
-  g_object_class_install_property (gobject_class,
-				   PROP_ORIENTATION,
-				   g_param_spec_enum ("orientation",
-						      _("Orientation"),
-						      _("The orientation of the tray."),
-						      GTK_TYPE_ORIENTATION,
-						      GTK_ORIENTATION_HORIZONTAL,
-						      G_PARAM_READABLE));
-}
-
-static void
-egg_tray_icon_get_property (GObject    *object,
-			    guint       prop_id,
-			    GValue     *value,
-			    GParamSpec *pspec)
-{
-  EggTrayIcon *icon = EGG_TRAY_ICON (object);
-
-  switch (prop_id)
-    {
-    case PROP_ORIENTATION:
-      g_value_set_enum (value, icon->orientation);
-      break;
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
-}
-
-static void
-egg_tray_icon_get_orientation_property (EggTrayIcon *icon)
-{
-  Display *xdisplay;
-  Atom type;
-  int format;
-  union {
-	gulong *prop;
-	guchar *prop_ch;
-  } prop = { NULL };
-  gulong nitems;
-  gulong bytes_after;
-  int error, result;
-
-  g_assert (icon->manager_window != None);
-  
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-
-  gdk_error_trap_push ();
-  type = None;
-  result = XGetWindowProperty (xdisplay,
-			       icon->manager_window,
-			       icon->orientation_atom,
-			       0, G_MAXLONG, FALSE,
-			       XA_CARDINAL,
-			       &type, &format, &nitems,
-			       &bytes_after, &(prop.prop_ch));
-  error = gdk_error_trap_pop ();
-
-  if (error || result != Success)
-    return;
-
-  if (type == XA_CARDINAL)
-    {
-      GtkOrientation orientation;
-
-      orientation = (prop.prop [0] == SYSTEM_TRAY_ORIENTATION_HORZ) ?
-					GTK_ORIENTATION_HORIZONTAL :
-					GTK_ORIENTATION_VERTICAL;
-
-      if (icon->orientation != orientation)
-	{
-	  icon->orientation = orientation;
-
-	  g_object_notify (G_OBJECT (icon), "orientation");
-	}
-    }
-
-  if (prop.prop)
-    XFree (prop.prop);
-}
-
-static GdkFilterReturn
-egg_tray_icon_manager_filter (GdkXEvent *xevent, GdkEvent *event, gpointer user_data)
-{
-  EggTrayIcon *icon = user_data;
-  XEvent *xev = (XEvent *)xevent;
-
-  if (xev->xany.type == ClientMessage &&
-      xev->xclient.message_type == icon->manager_atom &&
-      xev->xclient.data.l[1] == icon->selection_atom)
-    {
-      egg_tray_icon_update_manager_window (icon);
-    }
-  else if (xev->xany.window == icon->manager_window)
-    {
-      if (xev->xany.type == PropertyNotify &&
-	  xev->xproperty.atom == icon->orientation_atom)
-	{
-	  egg_tray_icon_get_orientation_property (icon);
-	}
-      if (xev->xany.type == DestroyNotify)
-	{
-	  egg_tray_icon_update_manager_window (icon);
-	}
-    }
-  
-  return GDK_FILTER_CONTINUE;
-}
-
-static void
-egg_tray_icon_unrealize (GtkWidget *widget)
-{
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkWindow *root_window;
-
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (widget),
-                                              icon->manager_window);
-
-      gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-    }
-
-  root_window = gdk_screen_get_root_window (gtk_widget_get_screen (widget));
-
-  gdk_window_remove_filter (root_window, egg_tray_icon_manager_filter, icon);
-
-  if (GTK_WIDGET_CLASS (parent_class)->unrealize)
-    (* GTK_WIDGET_CLASS (parent_class)->unrealize) (widget);
-}
-
-static void
-egg_tray_icon_send_manager_message (EggTrayIcon *icon,
-				    long         message,
-				    Window       window,
-				    long         data1,
-				    long         data2,
-				    long         data3)
-{
-  XClientMessageEvent ev;
-  Display *display;
-  
-  ev.type = ClientMessage;
-  ev.window = window;
-  ev.message_type = icon->system_tray_opcode_atom;
-  ev.format = 32;
-  ev.data.l[0] = gdk_x11_get_server_time (GTK_WIDGET (icon)->window);
-  ev.data.l[1] = message;
-  ev.data.l[2] = data1;
-  ev.data.l[3] = data2;
-  ev.data.l[4] = data3;
-
-  display = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  gdk_error_trap_push ();
-  XSendEvent (display,
-	      icon->manager_window, False, NoEventMask, (XEvent *)&ev);
-  XSync (display, False);
-  gdk_error_trap_pop ();
-}
-
-static void
-egg_tray_icon_send_dock_request (EggTrayIcon *icon)
-{
-  egg_tray_icon_send_manager_message (icon,
-				      SYSTEM_TRAY_REQUEST_DOCK,
-				      icon->manager_window,
-				      gtk_plug_get_id (GTK_PLUG (icon)),
-				      0, 0);
-}
-
-static void
-egg_tray_icon_update_manager_window (EggTrayIcon *icon)
-{
-  Display *xdisplay;
-  
-  xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-  
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					      icon->manager_window);
-      
-      gdk_window_remove_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-    }
-  
-  XGrabServer (xdisplay);
-  
-  icon->manager_window = XGetSelectionOwner (xdisplay,
-					     icon->selection_atom);
-
-  if (icon->manager_window != None)
-    XSelectInput (xdisplay,
-		  icon->manager_window, StructureNotifyMask|PropertyChangeMask);
-
-  XUngrabServer (xdisplay);
-  XFlush (xdisplay);
-  
-  if (icon->manager_window != None)
-    {
-      GdkWindow *gdkwin;
-
-      gdkwin = gdk_window_lookup_for_display (gtk_widget_get_display (GTK_WIDGET (icon)),
-					      icon->manager_window);
-      
-      gdk_window_add_filter (gdkwin, egg_tray_icon_manager_filter, icon);
-
-      /* Send a request that we'd like to dock */
-      egg_tray_icon_send_dock_request (icon);
-
-      egg_tray_icon_get_orientation_property (icon);
-    }
-}
-
-static void
-egg_tray_icon_realize (GtkWidget *widget)
-{
-  EggTrayIcon *icon = EGG_TRAY_ICON (widget);
-  GdkScreen *screen;
-  GdkDisplay *display;
-  Display *xdisplay;
-  char buffer[256];
-  GdkWindow *root_window;
-
-  if (GTK_WIDGET_CLASS (parent_class)->realize)
-    GTK_WIDGET_CLASS (parent_class)->realize (widget);
-
-  screen = gtk_widget_get_screen (widget);
-  display = gdk_screen_get_display (screen);
-  xdisplay = gdk_x11_display_get_xdisplay (display);
-
-  /* Now see if there's a manager window around */
-  g_snprintf (buffer, sizeof (buffer),
-	      "_NET_SYSTEM_TRAY_S%d",
-	      gdk_screen_get_number (screen));
-
-  icon->selection_atom = XInternAtom (xdisplay, buffer, False);
-  
-  icon->manager_atom = XInternAtom (xdisplay, "MANAGER", False);
-  
-  icon->system_tray_opcode_atom = XInternAtom (xdisplay,
-						   "_NET_SYSTEM_TRAY_OPCODE",
-						   False);
-
-  icon->orientation_atom = XInternAtom (xdisplay,
-					"_NET_SYSTEM_TRAY_ORIENTATION",
-					False);
-
-  egg_tray_icon_update_manager_window (icon);
-
-  root_window = gdk_screen_get_root_window (screen);
-  
-  /* Add a root window filter so that we get changes on MANAGER */
-  gdk_window_add_filter (root_window,
-			 egg_tray_icon_manager_filter, icon);
-}
-
-EggTrayIcon *
-egg_tray_icon_new_for_screen (GdkScreen *screen, const char *name)
-{
-  g_return_val_if_fail (GDK_IS_SCREEN (screen), NULL);
-
-  return g_object_new (EGG_TYPE_TRAY_ICON, "screen", screen, "title", name, NULL);
-}
-
-EggTrayIcon*
-egg_tray_icon_new (const gchar *name)
-{
-  return g_object_new (EGG_TYPE_TRAY_ICON, "title", name, NULL);
-}
-
-guint
-egg_tray_icon_send_message (EggTrayIcon *icon,
-			    gint         timeout,
-			    const gchar *message,
-			    gint         len)
-{
-  guint stamp;
-  
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), 0);
-  g_return_val_if_fail (timeout >= 0, 0);
-  g_return_val_if_fail (message != NULL, 0);
-		     
-  if (icon->manager_window == None)
-    return 0;
-
-  if (len < 0)
-    len = strlen (message);
-
-  stamp = icon->stamp++;
-  
-  /* Get ready to send the message */
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_BEGIN_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      timeout, len, stamp);
-
-  /* Now to send the actual message */
-  gdk_error_trap_push ();
-  while (len > 0)
-    {
-      XClientMessageEvent ev;
-      Display *xdisplay;
-
-      xdisplay = GDK_DISPLAY_XDISPLAY (gtk_widget_get_display (GTK_WIDGET (icon)));
-      
-      ev.type = ClientMessage;
-      ev.window = (Window)gtk_plug_get_id (GTK_PLUG (icon));
-      ev.format = 8;
-      ev.message_type = XInternAtom (xdisplay,
-				     "_NET_SYSTEM_TRAY_MESSAGE_DATA", False);
-      if (len > 20)
-	{
-	  memcpy (&ev.data, message, 20);
-	  len -= 20;
-	  message += 20;
-	}
-      else
-	{
-	  memcpy (&ev.data, message, len);
-	  len = 0;
-	}
-
-      XSendEvent (xdisplay,
-		  icon->manager_window, False, StructureNotifyMask, (XEvent *)&ev);
-      XSync (xdisplay, False);
-    }
-  gdk_error_trap_pop ();
-
-  return stamp;
-}
-
-void
-egg_tray_icon_cancel_message (EggTrayIcon *icon,
-			      guint        id)
-{
-  g_return_if_fail (EGG_IS_TRAY_ICON (icon));
-  g_return_if_fail (id > 0);
-  
-  egg_tray_icon_send_manager_message (icon, SYSTEM_TRAY_CANCEL_MESSAGE,
-				      (Window)gtk_plug_get_id (GTK_PLUG (icon)),
-				      id, 0, 0);
-}
-
-GtkOrientation
-egg_tray_icon_get_orientation (EggTrayIcon *icon)
-{
-  g_return_val_if_fail (EGG_IS_TRAY_ICON (icon), GTK_ORIENTATION_HORIZONTAL);
-
-  return icon->orientation;
-}
diff -urN firestarter-1.0.3/src/eggtrayicon.h firestarter-1.0.3.new/src/eggtrayicon.h
--- firestarter-1.0.3/src/eggtrayicon.h	2005-01-29 20:32:07.000000000 +0800
+++ firestarter-1.0.3.new/src/eggtrayicon.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,77 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/* eggtrayicon.h
- * Copyright (C) 2002 Anders Carlsson <andersca@gnu.org>
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the
- * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
- * Boston, MA 02111-1307, USA.
- */
-
-#ifndef __EGG_TRAY_ICON_H__
-#define __EGG_TRAY_ICON_H__
-
-#include <gtk/gtkplug.h>
-#include <gdk/gdkx.h>
-
-G_BEGIN_DECLS
-
-#define EGG_TYPE_TRAY_ICON		(egg_tray_icon_get_type ())
-#define EGG_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), EGG_TYPE_TRAY_ICON, EggTrayIcon))
-#define EGG_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-#define EGG_IS_TRAY_ICON(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), EGG_TYPE_TRAY_ICON))
-#define EGG_IS_TRAY_ICON_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), EGG_TYPE_TRAY_ICON))
-#define EGG_TRAY_ICON_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), EGG_TYPE_TRAY_ICON, EggTrayIconClass))
-	
-typedef struct _EggTrayIcon	  EggTrayIcon;
-typedef struct _EggTrayIconClass  EggTrayIconClass;
-
-struct _EggTrayIcon
-{
-  GtkPlug parent_instance;
-
-  guint stamp;
-  
-  Atom selection_atom;
-  Atom manager_atom;
-  Atom system_tray_opcode_atom;
-  Atom orientation_atom;
-  Window manager_window;
-
-  GtkOrientation orientation;
-};
-
-struct _EggTrayIconClass
-{
-  GtkPlugClass parent_class;
-};
-
-GType        egg_tray_icon_get_type       (void);
-
-EggTrayIcon *egg_tray_icon_new_for_screen (GdkScreen   *screen,
-					   const gchar *name);
-
-EggTrayIcon *egg_tray_icon_new            (const gchar *name);
-
-guint        egg_tray_icon_send_message   (EggTrayIcon *icon,
-					   gint         timeout,
-					   const char  *message,
-					   gint         len);
-void         egg_tray_icon_cancel_message (EggTrayIcon *icon,
-					   guint        id);
-
-GtkOrientation egg_tray_icon_get_orientation (EggTrayIcon *icon);
-					    
-G_END_DECLS
-
-#endif /* __EGG_TRAY_ICON_H__ */
diff -urN firestarter-1.0.3/src/Makefile.am firestarter-1.0.3.new/src/Makefile.am
--- firestarter-1.0.3/src/Makefile.am	2005-01-29 20:32:08.000000000 +0800
+++ firestarter-1.0.3.new/src/Makefile.am	2011-12-14 17:02:19.398065814 +0800
@@ -25,7 +25,6 @@
 	savelog.c	\
 	netfilter-script.c \
 	hitview.c	\
-	eggtrayicon.c	\
 	tray.c		\
 	dhcp-server.c	\
 	statusview.c	\
@@ -44,7 +43,6 @@
 	savelog.h	\
 	netfilter-script.h \
 	hitview.h	\
-	eggtrayicon.h	\
 	tray.h		\
 	dhcp-server.h	\
 	statusview.h	\
diff -urN firestarter-1.0.3/src/tray.c firestarter-1.0.3.new/src/tray.c
--- firestarter-1.0.3/src/tray.c	2005-01-29 20:32:08.000000000 +0800
+++ firestarter-1.0.3.new/src/tray.c	2011-12-14 17:05:04.237429900 +0800
@@ -10,7 +10,6 @@
  *--------------------------------------------------------------------*/
  
 #include "tray.h"
-#include "eggtrayicon.h"
 #include "globals.h"
 #include "xpm/firestarter-pixbufs.h"
 #include "firestarter.h"
@@ -20,12 +19,10 @@
 #include "statusview.h"
 #include "preferences.h"
 
-static EggTrayIcon *tray_icon;
-static GtkWidget *tray_icon_image;
-static GtkTooltips *tray_icon_tooltip;
+static GtkStatusIcon *tray_icon;
 
-static gboolean tray_clicked (GtkWidget *event_box, GdkEventButton *event, gpointer data);
-static gboolean tray_menu (GtkWidget *event_box, GdkEventButton *event, gpointer data);
+static gboolean tray_clicked (GtkStatusIcon *tray_icon, GdkEventButton *event, gpointer data);
+static gboolean tray_menu (GtkStatusIcon *tray_icon, GdkEventButton *event, gpointer data);
 
 static gboolean animating;
 
@@ -46,27 +43,22 @@
  */
 void tray_init (void)
 {
-	GtkWidget *eventbox;
-	GdkPixbuf *pixbuf;
+    tray_icon = gtk_status_icon_new();
 
-	tray_icon = egg_tray_icon_new ("Firestarter");
- 	pixbuf = gdk_pixbuf_new_from_inline (-1, icon_stop_normal, FALSE, NULL);
-	tray_icon_image = gtk_image_new_from_pixbuf (pixbuf);
-
-	eventbox = gtk_event_box_new ();
-	gtk_widget_show (eventbox);
-	gtk_container_add (GTK_CONTAINER (eventbox), tray_icon_image);
-	gtk_container_add (GTK_CONTAINER (tray_icon), eventbox);
+    GdkPixbuf *tray_icon_image = gdk_pixbuf_new_from_inline (-1, icon_stop_normal, FALSE, NULL);
 
-	g_signal_connect (G_OBJECT (eventbox), "button-release-event",
-	                  G_CALLBACK (tray_clicked), NULL );
+    gtk_status_icon_set_tooltip_text(tray_icon, "Firestarter");
+    gtk_status_icon_set_from_pixbuf(tray_icon, tray_icon_image);
 
-	gtk_widget_show_all (GTK_WIDGET (tray_icon));
+	g_signal_connect (G_OBJECT (tray_icon), "button-release-event",
+	                  G_CALLBACK (tray_clicked), NULL );
 
-	tray_icon_tooltip = gtk_tooltips_new ();
+    gtk_status_icon_set_visible( tray_icon, TRUE);
 
-	g_signal_connect (G_OBJECT (tray_icon), "destroy",
+/*	g_signal_connect (G_OBJECT (tray_icon), "destroy",
 	                  G_CALLBACK (tray_destroyed), NULL);
+*/
+    g_object_ref( G_OBJECT(tray_icon) );
 }
 
 gboolean
@@ -78,7 +70,7 @@
 void
 tray_remove (void)
 {
-	gtk_widget_destroy (GTK_WIDGET (tray_icon));
+	g_object_unref (G_OBJECT (tray_icon));
 	tray_icon = NULL;
 }
 
@@ -88,11 +80,9 @@
 static int
 animation_timeout (gpointer image)
 {
-	GdkPixbuf *pixbuf;
 
 	if (animating) {
-		pixbuf = gdk_pixbuf_new_from_inline (-1, image, FALSE, NULL);
-		gtk_image_set_from_pixbuf (GTK_IMAGE (tray_icon_image), pixbuf);
+        GdkPixbuf *tray_icon_image = gdk_pixbuf_new_from_inline (-1, image, FALSE, NULL);
 	}
 
 	return FALSE;
@@ -110,7 +100,7 @@
  */
 void tray_update (FirewallStatus state)
 {
-	GdkPixbuf *pixbuf = NULL;
+    GdkPixbuf *tray_icon_image;
 	gchar *tooltip = NULL;
 
 	if (!tray_is_running ())
@@ -140,23 +130,23 @@
 		}
 
 	} else if (state == STATUS_STOPPED) {
- 		pixbuf = gdk_pixbuf_new_from_inline (-1, icon_stop_normal, FALSE, NULL);
+ 		tray_icon_image = gdk_pixbuf_new_from_inline (-1, icon_stop_normal, FALSE, NULL);
 		tooltip = g_strdup (_("Firewall stopped"));
 	} else if (state == STATUS_RUNNING) {
-	 	pixbuf = gdk_pixbuf_new_from_inline (-1, icon_start_normal, FALSE, NULL);
+	 	tray_icon_image = gdk_pixbuf_new_from_inline (-1, icon_start_normal, FALSE, NULL);
 		tooltip = g_strdup (_("Firewall running"));
 	} else if (state == STATUS_LOCKED) {
-	 	pixbuf = gdk_pixbuf_new_from_inline (-1, icon_locked, FALSE, NULL);
+	 	tray_icon_image = gdk_pixbuf_new_from_inline (-1, icon_locked, FALSE, NULL);
 		tooltip = g_strdup (_("Firewall locked"));
 	}
 
 	if (state != STATUS_HIT) {
 		animating = FALSE;
-		gtk_image_set_from_pixbuf (GTK_IMAGE (tray_icon_image), pixbuf);
-		gtk_widget_show (tray_icon_image);
+        gtk_status_icon_set_from_pixbuf (tray_icon, tray_icon_image);
+
 	}
+    gtk_status_icon_set_tooltip(tray_icon, tooltip); 
 
-	gtk_tooltips_set_tip (tray_icon_tooltip, GTK_WIDGET (tray_icon), tooltip, NULL);
 	g_free (tooltip);
 }
 
@@ -164,7 +154,7 @@
  * Callback for when the system tray icon is clicked
  */
 static gboolean
-tray_clicked (GtkWidget *event_box, GdkEventButton *event, gpointer data)
+tray_clicked (GtkStatusIcon *tray_icon, GdkEventButton *event, gpointer data)
 {
 	/* Clear state */
 	if (event->button == 1 && status_get_state () == STATUS_HIT) {
@@ -178,7 +168,7 @@
 
 	/* Pop up tray context menu */
 	} else if (event->button == 3) {
-		return tray_menu (event_box, event, data);
+		return tray_menu (tray_icon, event, data);
 	}
 
 	return FALSE;
@@ -194,7 +184,7 @@
  * Callback for popping up the menu
  */
 static gboolean
-tray_menu (GtkWidget *widget, GdkEventButton *event, gpointer data)
+tray_menu (GtkStatusIcon *tray_icon, GdkEventButton *event, gpointer data)
 {
 	GtkWidget *status_menu;
 	GtkWidget *item;
@@ -221,7 +211,7 @@
 	gtk_widget_show_all (status_menu);
 
 	gtk_menu_popup (GTK_MENU(status_menu), NULL, NULL,
-	                NULL, NULL,
+	                gtk_status_icon_position_menu, tray_icon,
 	                event->button, event->time);
 
 	return TRUE;
